"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>runExecutor
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
let NxReporter = class NxReporter {
    async *[Symbol.asyncIterator]() {
        do {
            const hasErrors = await this.deferred.promise;
            yield {
                hasErrors
            };
            this.setupDeferred();
        }while (this.watch)
    }
    setupDeferred() {
        let resolve;
        this.deferred = {
            promise: new Promise((res)=>{
                resolve = res;
            }),
            resolve
        };
    }
    onFinished(files, errors) {
        const hasErrors = files.some((f)=>{
            var ref;
            return ((ref = f.result) == null ? void 0 : ref.state) === 'fail';
        }) || (errors == null ? void 0 : errors.length) > 0;
        this.deferred.resolve(hasErrors);
    }
    constructor(watch){
        this.watch = watch;
        this.setupDeferred();
    }
};
async function* runExecutor(options, context) {
    const { startVitest  } = await Function('return import("vitest/node")')();
    const projectRoot = context.projectGraph.nodes[context.projectName].data.root;
    const nxReporter = new NxReporter(options.watch);
    var _reporters;
    const ctx = await startVitest(options.mode, [], _extends({}, options, {
        root: projectRoot,
        reporters: [
            ...(_reporters = options.reporters) != null ? _reporters : [],
            'default',
            nxReporter
        ],
        coverage: {
            reportsDirectory: options.reportsDirectory
        }
    }));
    let hasErrors = false;
    const processExit = ()=>{
        ctx.exit();
        if (hasErrors) {
            process.exit(1);
        } else {
            process.exit(0);
        }
    };
    if (options.watch) {
        process.on('SIGINT', processExit);
        process.on('SIGTERM', processExit);
        process.on('exit', processExit);
    }
    for await (const report of nxReporter){
        hasErrors = report.hasErrors;
    }
    return {
        success: !hasErrors
    };
}

//# sourceMappingURL=vitest.impl.js.map