{"version":3,"sources":["../../../../../../packages/vite/src/executors/dev-server/dev-server.impl.ts"],"sourcesContent":["import 'dotenv/config';\nimport { ExecutorContext } from '@nrwl/devkit';\nimport { createServer, InlineConfig, mergeConfig, ViteDevServer } from 'vite';\n\nimport {\n  getBuildAndSharedConfig,\n  getBuildTargetOptions,\n  getServerOptions,\n} from '../../utils/options-utils';\n\nimport { ViteDevServerExecutorOptions } from './schema';\nimport { ViteBuildExecutorOptions } from '../build/schema';\n\nexport default async function* viteDevServerExecutor(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): AsyncGenerator<{ success: boolean; baseUrl: string }> {\n  const mergedOptions = {\n    ...getBuildTargetOptions(options.buildTarget, context),\n    ...options,\n  } as ViteDevServerExecutorOptions & ViteBuildExecutorOptions;\n\n  const serverConfig: InlineConfig = mergeConfig(\n    await getBuildAndSharedConfig(mergedOptions, context),\n    {\n      server: getServerOptions(mergedOptions, context),\n    } as InlineConfig\n  );\n\n  if (serverConfig.mode === 'production') {\n    console.warn('WARNING: serve is not meant to be run in production!');\n  }\n\n  const server = await createServer(serverConfig);\n\n  const baseUrl = await runViteDevServer(server);\n\n  yield {\n    success: true,\n    baseUrl: baseUrl,\n  };\n\n  // This Promise intentionally never resolves, leaving the process running\n  await new Promise<{ success: boolean }>(() => {});\n}\n\nasync function runViteDevServer(server: ViteDevServer): Promise<string> {\n  try {\n    await server.listen();\n    server.printUrls();\n\n    const processOnExit = () => {\n      process.off('SIGINT', processOnExit);\n      process.off('SIGTERM', processOnExit);\n      process.off('exit', processOnExit);\n    };\n\n    process.on('SIGINT', processOnExit);\n    process.on('SIGTERM', processOnExit);\n    process.on('exit', processOnExit);\n    return `${server.config?.server?.https ? 'https' : 'http'}://${\n      server.config?.server?.host\n    }:${server.config?.server?.port}`;\n  } catch (err) {\n    console.log(err);\n  }\n}\n"],"names":["viteDevServerExecutor","options","context","mergedOptions","getBuildTargetOptions","buildTarget","serverConfig","mergeConfig","getBuildAndSharedConfig","server","getServerOptions","mode","console","warn","createServer","baseUrl","runViteDevServer","success","Promise","listen","printUrls","processOnExit","process","off","on","config","https","host","port","err","log"],"mappings":"AAAA;+BAaA;;aAA+BA;;;QAbxB;sBAEgE;8BAMhE;AAKQ,gBAAgBA,sBAC7BC,OAAqC,EACrCC,OAAwB,EAC+B;IACvD,MAAMC,gBAAgB,aACjBC,IAAAA,mCAAqB,EAACH,QAAQI,WAAW,EAAEH,UAC3CD;IAGL,MAAMK,eAA6BC,IAAAA,iBAAW,EAC5C,MAAMC,IAAAA,qCAAuB,EAACL,eAAeD,UAC7C;QACEO,QAAQC,IAAAA,8BAAgB,EAACP,eAAeD;IAC1C;IAGF,IAAII,aAAaK,IAAI,KAAK,cAAc;QACtCC,QAAQC,IAAI,CAAC;IACf,CAAC;IAED,MAAMJ,SAAS,MAAMK,IAAAA,kBAAY,EAACR;IAElC,MAAMS,UAAU,MAAMC,iBAAiBP;IAEvC,MAAM;QACJQ,SAAS,IAAI;QACbF,SAASA;IACX;IAEA,yEAAyE;IACzE,MAAM,IAAIG,QAA8B,IAAM,CAAC;AACjD;AAEA,eAAeF,iBAAiBP,MAAqB,EAAmB;IACtE,IAAI;YAaQA,WACRA,YACEA;QAdJ,MAAMA,OAAOU,MAAM;QACnBV,OAAOW,SAAS;QAEhB,MAAMC,gBAAgB,IAAM;YAC1BC,QAAQC,GAAG,CAAC,UAAUF;YACtBC,QAAQC,GAAG,CAAC,WAAWF;YACvBC,QAAQC,GAAG,CAAC,QAAQF;QACtB;QAEAC,QAAQE,EAAE,CAAC,UAAUH;QACrBC,QAAQE,EAAE,CAAC,WAAWH;QACtBC,QAAQE,EAAE,CAAC,QAAQH;QACnB,OAAO,CAAC,EAAEZ,CAAAA,CAAAA,MAAAA,OAAOgB,MAAM,YAAbhB,KAAAA,IAAAA,QAAAA,IAAeA,kBAAfA,KAAAA,SAAuBiB,KAAF,AAAD,IAAW,UAAU,MAAM,CAAC,GAAG,EAC3DjB,CAAAA,OAAAA,OAAOgB,MAAM,YAAbhB,KAAAA,IAAAA,QAAAA,KAAeA,kBAAfA,KAAAA,SAAuBkB,IAAF,CACtB,CAAC,EAAElB,CAAAA,OAAAA,OAAOgB,MAAM,YAAbhB,KAAAA,IAAAA,QAAAA,KAAeA,kBAAfA,KAAAA,SAAuBmB,IAAF,CAAO,CAAC;IACnC,EAAE,OAAOC,KAAK;QACZjB,QAAQkB,GAAG,CAACD;IACd;AACF"}