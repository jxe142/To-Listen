"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>viteDevServerExecutor
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
require("dotenv/config");
const _vite = require("vite");
const _optionsUtils = require("../../utils/options-utils");
async function* viteDevServerExecutor(options, context) {
    const mergedOptions = _extends({}, (0, _optionsUtils.getBuildTargetOptions)(options.buildTarget, context), options);
    const serverConfig = (0, _vite.mergeConfig)(await (0, _optionsUtils.getBuildAndSharedConfig)(mergedOptions, context), {
        server: (0, _optionsUtils.getServerOptions)(mergedOptions, context)
    });
    if (serverConfig.mode === 'production') {
        console.warn('WARNING: serve is not meant to be run in production!');
    }
    const server = await (0, _vite.createServer)(serverConfig);
    const baseUrl = await runViteDevServer(server);
    yield {
        success: true,
        baseUrl: baseUrl
    };
    // This Promise intentionally never resolves, leaving the process running
    await new Promise(()=>{});
}
async function runViteDevServer(server) {
    try {
        var ref, ref1, ref2, ref3, ref4, ref5;
        await server.listen();
        server.printUrls();
        const processOnExit = ()=>{
            process.off('SIGINT', processOnExit);
            process.off('SIGTERM', processOnExit);
            process.off('exit', processOnExit);
        };
        process.on('SIGINT', processOnExit);
        process.on('SIGTERM', processOnExit);
        process.on('exit', processOnExit);
        return `${((ref = server.config) == null ? void 0 : (ref1 = ref.server) == null ? void 0 : ref1.https) ? 'https' : 'http'}://${(ref2 = server.config) == null ? void 0 : (ref3 = ref2.server) == null ? void 0 : ref3.host}:${(ref4 = server.config) == null ? void 0 : (ref5 = ref4.server) == null ? void 0 : ref5.port}`;
    } catch (err) {
        console.log(err);
    }
}

//# sourceMappingURL=dev-server.impl.js.map