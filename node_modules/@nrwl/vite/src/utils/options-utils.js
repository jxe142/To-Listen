"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getBuildAndSharedConfig: ()=>getBuildAndSharedConfig,
    normalizeViteConfigFilePath: ()=>normalizeViteConfigFilePath,
    getServerOptions: ()=>getServerOptions,
    getBuildTargetOptions: ()=>getBuildTargetOptions,
    getViteBuildOptions: ()=>getViteBuildOptions
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
const _devkit = require("@nrwl/devkit");
const _fs = require("fs");
const _path = require("path");
const _vite = require("vite");
const _rollupReplaceFilesPlugin = require("../../plugins/rollup-replace-files.plugin");
async function getBuildAndSharedConfig(options, context) {
    const projectRoot = context.workspace.projects[context.projectName].root;
    return (0, _vite.mergeConfig)({}, {
        mode: options.mode,
        root: projectRoot,
        base: options.base,
        configFile: normalizeViteConfigFilePath(projectRoot, options.configFile),
        plugins: [
            (0, _rollupReplaceFilesPlugin.default)(options.fileReplacements)
        ],
        build: getViteBuildOptions(options, projectRoot),
        optimizeDeps: {
            force: options.force
        }
    });
}
function normalizeViteConfigFilePath(projectRoot, configFile) {
    return configFile && (0, _fs.existsSync)((0, _devkit.joinPathFragments)(configFile)) ? configFile : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.ts`)) ? (0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.ts`) : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.js`)) ? (0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.js`) : undefined;
}
function getServerOptions(options, context) {
    const projectRoot = context.workspace.projects[context.projectName].root;
    let serverOptions = {};
    if (options.proxyConfig) {
        const proxyConfigPath = options.proxyConfig ? (0, _path.join)(context.root, options.proxyConfig) : (0, _path.join)(projectRoot, 'proxy.conf.json');
        if ((0, _fs.existsSync)(proxyConfigPath)) {
            _devkit.logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);
            serverOptions.proxy = require(proxyConfigPath);
            serverOptions.fs = {
                allow: [
                    (0, _vite.searchForWorkspaceRoot)((0, _devkit.joinPathFragments)(projectRoot)),
                    (0, _devkit.joinPathFragments)(context.root, 'node_modules/vite')
                ]
            };
        }
    }
    serverOptions = _extends({}, serverOptions, {
        host: options.host,
        port: options.port,
        https: options.https,
        hmr: options.hmr,
        open: options.open,
        cors: options.cors,
        logLevel: options.logLevel,
        clearScreen: options.clearScreen
    });
    return serverOptions;
}
function getBuildTargetOptions(buildTarget, context) {
    const target = (0, _devkit.parseTargetString)(buildTarget);
    return (0, _devkit.readTargetOptions)(target, context);
}
function getViteBuildOptions(options, projectRoot) {
    let buildOptions = {
        outDir: (0, _path.relative)(projectRoot, options.outputPath),
        emptyOutDir: true,
        reportCompressedSize: true,
        cssCodeSplit: true,
        target: 'esnext',
        commonjsOptions: {
            transformMixedEsModules: true
        }
    };
    buildOptions = _extends({}, buildOptions, {
        sourcemap: options.sourcemap,
        minify: options.minify,
        manifest: options.manifest,
        ssrManifest: options.ssrManifest,
        ssr: options.ssr,
        logLevel: options.logLevel
    });
    return buildOptions;
}

//# sourceMappingURL=options-utils.js.map